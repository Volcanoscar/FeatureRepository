From f813414cbea4fa862a868fe21e3132ae6f16cf29 Mon Sep 17 00:00:00 2001
From: liangjianqiu <liangjianqiu@hkzechin.com>
Date: Tue, 22 Mar 2016 16:46:32 +0800
Subject: [PATCH] =?UTF-8?q?[Azumi][Dial]=E6=8B=A8=E5=8F=B7=E6=A8=A1?=
 =?UTF-8?q?=E5=9D=97=E6=B7=BB=E5=8A=A0=E5=BF=AB=E9=80=9F=E6=8B=A8=E5=8F=B7?=
 =?UTF-8?q?=E5=8A=9F=E8=83=BD?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 alps/packages/apps/Dialer/AndroidManifest.xml      |  15 +
 alps/packages/apps/Dialer/res/values/colors.xml    |   5 +
 alps/packages/apps/Dialer/res/values/styles.xml    |  16 +
 .../res_ext/drawable-hdpi/ic_add_person_dk.png     | Bin 0 -> 1533 bytes
 .../res_ext/drawable-mdpi/ic_add_person_dk.png     | Bin 0 -> 1084 bytes
 .../res_ext/drawable/remove_icon_selector.xml      |  21 +
 .../res_ext/layout/mtk_speed_dial_input_dialog.xml |  26 +
 .../res_ext/layout/mtk_speed_dial_list_item.xml    |  90 +++
 .../apps/Dialer/res_ext/values/mtk_strings.xml     |  14 +
 .../src/com/android/dialer/DialtactsActivity.java  |   2 +-
 .../com/android/dialer/SpecialCharSequenceMgr.java |  10 +-
 .../android/dialer/dialpad/DialpadFragment.java    |  19 +-
 .../com/mediatek/dialer/ext/ExtensionManager.java  |  15 +
 .../speeddial/DontPressWithParentImageView.java    |  28 +
 .../dialer/speeddial/OP01DialPadExtension.java     | 156 ++++
 .../dialer/speeddial/SpeedDialActivity.java        | 875 +++++++++++++++++++++
 .../dialer/speeddial/SpeedDialController.java      |  88 +++
 .../dialer/speeddial/provider/SpeedDial.java       |  18 +
 .../provider/SpeedDialDatabaseHelper.java          |  55 ++
 .../speeddial/provider/SpeedDialProvider.java      | 125 +++
 20 files changed, 1563 insertions(+), 15 deletions(-)
 mode change 100644 => 100755 alps/packages/apps/Dialer/res/values/colors.xml
 mode change 100644 => 100755 alps/packages/apps/Dialer/res/values/styles.xml
 create mode 100755 alps/packages/apps/Dialer/res_ext/drawable-hdpi/ic_add_person_dk.png
 create mode 100755 alps/packages/apps/Dialer/res_ext/drawable-mdpi/ic_add_person_dk.png
 create mode 100755 alps/packages/apps/Dialer/res_ext/drawable/remove_icon_selector.xml
 create mode 100755 alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_input_dialog.xml
 create mode 100755 alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_list_item.xml
 mode change 100644 => 100755 alps/packages/apps/Dialer/src/com/android/dialer/DialtactsActivity.java
 mode change 100644 => 100755 alps/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/DontPressWithParentImageView.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/OP01DialPadExtension.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialActivity.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialController.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDial.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialDatabaseHelper.java
 create mode 100755 alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialProvider.java

diff --git a/alps/packages/apps/Dialer/AndroidManifest.xml b/alps/packages/apps/Dialer/AndroidManifest.xml
index e8e942e..ef6b9c1 100755
--- a/alps/packages/apps/Dialer/AndroidManifest.xml
+++ b/alps/packages/apps/Dialer/AndroidManifest.xml
@@ -396,5 +396,20 @@
 			</intent-filter>
 		</activity>
 		<!-- Added by Starmen  end 20160125-->
+        <activity android:name="com.mediatek.dialer.speeddial.SpeedDialActivity"
+            android:label="@string/call_speed_dial"
+            android:configChanges="orientation|keyboardHidden|screenSize"
+            android:theme="@style/SettingsLight">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>    
+        <provider android:name="com.mediatek.dialer.speeddial.provider.SpeedDialProvider" 
+            android:authorities="speed_dial"
+            android:exported="true"
+            android:multiprocess="true"
+            android:readPermission="android.permission.READ_SPEED_DIAL"
+            android:writePermission="android.permission.WRITE_SPEED_DIAL"/>  		
     </application>
 </manifest>
diff --git a/alps/packages/apps/Dialer/res/values/colors.xml b/alps/packages/apps/Dialer/res/values/colors.xml
old mode 100644
new mode 100755
index 8ce3c17..5b2a26c
--- a/alps/packages/apps/Dialer/res/values/colors.xml
+++ b/alps/packages/apps/Dialer/res/values/colors.xml
@@ -104,4 +104,9 @@
     <color name="floating_action_button_touch_tint">#80ffffff</color>
 
     <color name="call_log_action_divider">#eeeeee</color>
+    
+<!-- jianqiu add 20150710 speeddial -->   
+    <color name="phone_settings_actionbar_text_color">#FFFFFF</color>
+    <color name="phone_settings_background_color">#f5f5f5</color>
+    <color name="phone_settings_actionbar_color">#e6e6e6</color>        
 </resources>
diff --git a/alps/packages/apps/Dialer/res/values/styles.xml b/alps/packages/apps/Dialer/res/values/styles.xml
old mode 100644
new mode 100755
index e3a2f99..ecd90ba
--- a/alps/packages/apps/Dialer/res/values/styles.xml
+++ b/alps/packages/apps/Dialer/res/values/styles.xml
@@ -246,4 +246,20 @@
         <item name="android:background">@drawable/oval_ripple</item>
         <item name="android:padding">8dp</item>
     </style>
+    
+<!-- jianqiu add 20150710 speeddial -->    
+    <style name="SettingsLight" parent="android:Theme.Material.Light">
+        <item name="android:windowBackground">@color/phone_settings_background_color</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:actionBarStyle">@style/DialtactsActionBarStyle</item>
+        <item name="android:actionMenuTextColor">@color/phone_settings_actionbar_text_color</item>
+        <item name="android:actionOverflowButtonStyle">@style/DialtactsActionBarOverflow</item>
+        <item name="android:homeAsUpIndicator">@drawable/ic_back_arrow</item>
+        <item name="android:windowActionBarOverlay">false</item>
+        <item name="android:colorPrimaryDark">@color/actionbar_background_color_dark</item>
+        <!-- Setting text. -->
+        <item name="android:textColorPrimary">@color/setting_primary_color</item>
+        <!-- Setting description. -->
+        <item name="android:textColorSecondary">@color/setting_secondary_color</item>
+    </style>       
 </resources>
diff --git a/alps/packages/apps/Dialer/res_ext/drawable-hdpi/ic_add_person_dk.png b/alps/packages/apps/Dialer/res_ext/drawable-hdpi/ic_add_person_dk.png
new file mode 100755
index 0000000000000000000000000000000000000000..7096ed214dcb1d38c8cec5f76600e485f368f94e
GIT binary patch
literal 1533
zcmZ9Mc{tPw7{`Cj;}|qKGUT4IC?pedt?bO~oUSxU%F&3K3B|ali54l1bB5_4Bt!07
zN;%7s$F;E%sv%nv+8J_RJMI3p`@GNlexL9AKA-pf?`1hV;UUth(f|NJhy)Btq=+90
zmJro5p!Ecih|y4vC;+HQliBhX7x_J*Bs?0Z98jMX8JG`&<Ol#vJphP_2Y?MxE9MIT
zgp0O(B?Ex<JpfRqXFoe>BN|9tu*YM7-5-(HT$CZ|NYM#rLq$sXCviOiwxV<WL=4L1
z;)nO+#9JQN1CoOC#y(w#{XLxF-=1RnQ0U|d6xs&tuZTK<!zi*~Og7Hu0F<*Lhf?gY
z$B1LGx{TL{+C4px&R~PM{5<8`#liQzY+O!nEcedk=FX00e7fF!)w9ZLWOsMu44-7G
zK1s?P#HZkR7n7x*39a5AyWhW^fZWG00xc+pRdimxI)uS#I|EI;qEA>$)ubAk)_f@c
z^mMdrPc5s@E)R%O3-@3J)F^f1s*R%3B86tQw?bX?u=%#Kf-)gP>_fl4xBNirs1ajN
z<m61>YN1_t$2GsjIkAOGsM&a`PVE`I8_Q{aSKhU=Wdzjea1%*Q7uzA(B+c%<_biuH
zVEA}co0CxuDZ-F=1{GXrF{ZkEk_9g3%}}Tr)>L{eIijQg{2PNl9IUxjqexm+0~(cH
zQXJn)57$AA9{r4k`TeGE-qjF%u*LSn&ps(8+OgjQAx?d4Ra&k+o!i_ziUAi$4X{>C
zJSOEWqa7%HnQe;<E!x<rTo-xQJTuU;{6;}N%+Zp6o3KfHw0DvxM`#>K6Xv=G*s58j
zENfkR_1G~PX_9$DP{r1pS6aN!Wew={WN0KN2{l?g4}tvRau`~3+Ux|Oo_{~J?)Plz
z{I%npHp3SN+&jvUcLaG%)|XOCt0<$VFCXNCNVZ%p3+&YL+am?z0Rl*=h~T;*+;sx+
zh^mk4ZzCkUl!lUACFWh4{A(^tD1Xdcd%rCo1<7F*DTrHb>cQ*cmxP)}l<WD4G47o2
z+VGTXknSnsCDzho$>d**RXS55raM}(ZSKK0<k$^UK22~&ne{-21YBkzpY?osw6Czo
z!=TpxW*_d|jk=r3LUYYF_Ylg(Oz4<1NJXGOIH)8Xj-xdKhVfZzk?jNg_L-WX2G>K)
zuZ(rr6J#mI&<=c!c7Uxe^xMi&Nm7`bZU!sH`~}|GReg7BSfK9p;x3xq+e^wmcyF8u
zPrcMR$6QA0m%YZ5k@Btk(!2|I%${Da65Np6Pp#hDJ?)XrRxylzqVZ(5aX1Q5=DU%G
z31lnVT@QM}YwSt4D8Z5pC6hTT_8~dYhm|`>%hWNBh6O06?(TRUNPKEn!shlKFK&nK
z;81@`rg^m2xs!g+#fCRr1|8~3R*Z4q-A3a0m)nmA_5h`j^%f;mVHuSkQ;t_ikVz05
zW~wn+?8t@W!DwksyF6GqKjEio-$KpnzJ&6wip-V7$wcKeP*WPx<54}gES`|HuZXHg
z*R5+hOYbEvezr_EAClGqSx7ZH7+NsKhM=i1i%D#=4&5nz8C?>#wO3ZEz39>sG10E1
zQvuGLsVUgsT7u(oJUJ0tfrFoq6jp2ERa0;wy}j|jlF<^Ik_P?M&|>20kFc=@Z!cf<
z66uqh+HlRSLRy0<x}LAT8K`s^wu$HJqA#pHbU?Y#jL%P)$NC6xyrWR9(diFhray93
zGPLy+|C|onfnLDOJ5012i+w35+W9k3HL{DJ2A1+!**1aq_NRuk=VQe|S(;@Vt8S$a
z?#|_)D&!2>^tXc_PLr3=GL4crjunl!sTNzKEo`|{Nj9HdkAbt>zP;I;X#duzU`3|<
zCO~5uO7jn}D~(&SU;khRF-uNZiawlf7}hP!*E@`2?Gr)~31EUaYHEbAFfv8B97R~0
zSy`J}iL5mOF|iB!`XAtOkgp&0%Krfi>tl$2ftl>C8WEuK<HD&RYFMOq2n9g-23?@Q
ch?l)-6cWYT_eyXN<;NQah*&2~C7K-fH=7Bpy#N3J

literal 0
HcmV?d00001

diff --git a/alps/packages/apps/Dialer/res_ext/drawable-mdpi/ic_add_person_dk.png b/alps/packages/apps/Dialer/res_ext/drawable-mdpi/ic_add_person_dk.png
new file mode 100755
index 0000000000000000000000000000000000000000..0e0aed02cef6b4c4e9908e067698e927d347123d
GIT binary patch
literal 1084
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdzmUKs7M+SzC{oH>NS%G}U;vjb?
zhIQv;UV>C6dj$D1FjT2AFf_C<F#G}vHN0S8C^cYUc$L7wU^Rn*LA+qju0R{01Y44~
zy9>jA5L~c#`DCC7XMsm#F_88EW4Dvpb_@*6Jf1F&ArXhqUiUwdnk>Wq;r!0;=OjGO
zbbAPKD;cIL8j5XR5NR}VD(ljSlTGF6M~+Eyr@AVpo)lX7F<&Uv?L?E4SLdN54c~h^
z-`k3ve_#3j^E}Jvd*AO&eiXj_xy^ncy8r$A|2wC|w(Qy!m3Mqa*I%nydse=_WfW3s
zXf0wsqjZlIU)^S%j$no@Q~I3_a$G<DKIc!*;vc%_W~DmzY_m9h?QUEDN7cB)-4(+3
zAI@aBl9C+7#={&CBj;^c$KYO2tTB_VUiNvC==-E{&POG-23)MwhocrssC_)mxl`;x
z+&jY*O$N)&{B4^e*W|v|dc(7!JhA?cEdR;oz~lQ4UJZKl+o6ncU%Di}kJXx{?1Hd}
z>5g9m_Z8=^d42oZKGuf0vU^+^%8nKXui;+#_Fm1)<xS?X3d-~U3w;-_%<<-blJ|XQ
z$n)@r4Ev5&T14)#K6XE7Mc;$JIU%vvjc+gUm0R(87w5t33cDNMA7<Ayoqx5<t}Qu8
z{SVXk$Nqan-mmBPJmmZF?T#N-@AzKJ9pQiW_NUWIf0+Za7CKWOEKqqP?Pl3o_R!Ks
z#H;^Nb&T57mxXt_zn|Itd_m=f=Z%4Lo_cO~&pN&RfsE$Edk0oq1n$|N__xe4hap2#
z{M7oxu0J-2#8kWpy3^4AVY;eX^3{bkZKpr#yqi*WC_G56Mp^a6(H)$>mpFb=o_9#Q
zwP%~*+=f+rPt70c##~Zd(S52s?!e(Lw=E~QB^~x{ke=`Lwf<5K$JsCSf=_Rp-@x48
z{{6wpq_=A(1S)dK@jg}OI(S*`Y1ijFKhrLm9}?YozdQPL!FJ7Pi=$m3uh0Dc6)@`&
z)5@fI8+ID0x$ZE(ReiHd+9t_CK0i?TYb$4+ZpF>hmv^o6pQ(L1VrM7UYPF#GHw5M8
zJPMd&+xD6Hg48{+;-zbvPT7dJ1&AIBTf(?)(eK{|pZgx4idbELnR%*-;bz7CkDD!S
ztDo)rlm4tf!rz|7c7a+D2Os<EGM{rLd{aKD1x4KJ{9C7KZq%@>_M!df11TL37^h_a
zf5~_6fA_f%j!(&YukZ0st!KEU`z`MI>Fp}O45C`%8c~vxSdwa$T$Bo=7>o=Ijdcyo
zb&U-|3=OPIEUk<!fm|yCgWLa^UZH5n%}>cpt3=meZe?l!(eQlEv5i0tk{}y`^V3So
n6N^$A98>a>QWZRN6Vp?JQWH}u3s0tkaxsIatDnm{r-UW|MR4D#

literal 0
HcmV?d00001

diff --git a/alps/packages/apps/Dialer/res_ext/drawable/remove_icon_selector.xml b/alps/packages/apps/Dialer/res_ext/drawable/remove_icon_selector.xml
new file mode 100755
index 0000000..a3fdcf0
--- /dev/null
+++ b/alps/packages/apps/Dialer/res_ext/drawable/remove_icon_selector.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:exitFadeDuration="@android:integer/config_mediumAnimTime">
+   <item android:state_window_focused="false" android:drawable="@android:color/transparent" />
+   <item android:state_focused="false" android:state_pressed="true" android:drawable="@drawable/list_selector_background_transition_holo_light" />
+</selector>
diff --git a/alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_input_dialog.xml b/alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_input_dialog.xml
new file mode 100755
index 0000000..2ff3450
--- /dev/null
+++ b/alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_input_dialog.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingLeft="15dip"
+    android:paddingRight="15dip"
+    android:orientation="horizontal">
+
+    <EditText
+        android:id="@+id/number"
+        android:layout_width="0dip"
+        android:layout_height="48dip"
+        android:layout_weight="0.8"
+        android:layout_marginTop="16dip"
+        android:inputType="phone"/>
+
+    <ImageView
+        android:id="@+id/contacts"
+        android:layout_width="0dip"
+        android:layout_height="48dip"
+        android:layout_weight="0.2"
+        android:layout_gravity="center_vertical"
+        style="?android:attr/buttonBarButtonStyle"
+        android:src="@drawable/ic_add_person_dk"/>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_list_item.xml b/alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_list_item.xml
new file mode 100755
index 0000000..be9ae34
--- /dev/null
+++ b/alps/packages/apps/Dialer/res_ext/layout/mtk_speed_dial_list_item.xml
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="60dip"
+    android:focusable="false" >
+
+    <TextView android:id="@+id/sd_index"
+        android:layout_width="48dip"
+        android:layout_height="48dip"
+        android:paddingLeft="2dip"
+        android:paddingTop="2dip"
+        android:paddingBottom="2dip"
+        android:textStyle="normal"
+        android:textSize="30sp"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentBottom="true"
+        android:gravity="center"
+    />
+
+ 	<ImageView
+        android:id="@+id/sd_photo"
+        android:layout_width="50dip"
+        android:layout_height="50dip"
+        android:layout_marginTop="5dip"
+        android:layout_marginRight="3dip"
+        android:layout_toRightOf="@id/sd_index"
+        style="@*android:style/Widget.QuickContactBadge.WindowMedium"
+        android:gravity="center"
+    />
+
+    <TextView android:id="@+id/sd_label"
+        android:textStyle="bold"
+        android:textSize="13sp"
+        android:singleLine="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingBottom="4dip"
+        android:paddingRight="2dip"
+        android:layout_toRightOf="@id/sd_photo"
+        android:layout_alignWithParentIfMissing="true"
+        android:layout_alignParentBottom="true"
+        android:ellipsize="end"
+        android:maxWidth="100dip"
+        android:visibility="gone" />
+
+    <com.mediatek.dialer.speeddial.DontPressWithParentImageView
+        android:id="@+id/sd_remove"
+        android:src="@drawable/ic_remove"
+        android:layout_width="@android:dimen/app_icon_size"
+        android:layout_height="match_parent"
+        android:minHeight="?android:attr/listPreferredItemHeight"
+        android:background="@drawable/remove_icon_selector"        
+        android:layout_alignParentRight="true"
+        android:layout_marginLeft="3dip"
+        android:layout_marginRight="14dip"
+        android:layout_marginTop="8dip"
+        android:visibility="gone" />
+
+    <TextView android:id="@+id/sd_number"
+        android:textStyle="normal"
+        android:textSize="13sp"
+        android:singleLine="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingBottom="4dip"
+        android:paddingRight="2dip"
+        android:layout_toRightOf="@id/sd_label"
+        android:layout_toLeftOf="@id/sd_remove"
+        android:layout_alignWithParentIfMissing="true"
+        android:layout_alignParentBottom="true"
+        android:ellipsize="marquee"
+        android:visibility="gone" />
+
+    <TextView android:id="@+id/sd_name"
+        android:textStyle="normal"
+        android:textSize="20sp"
+        android:singleLine="true"
+        android:paddingRight="2dip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerVertical="true"
+        android:layout_toRightOf="@id/sd_photo"
+        android:layout_toLeftOf="@id/sd_remove"
+        android:layout_above="@id/sd_number" 
+        android:ellipsize="marquee"/>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/alps/packages/apps/Dialer/res_ext/values/mtk_strings.xml b/alps/packages/apps/Dialer/res_ext/values/mtk_strings.xml
index 63e5334..2bbf123 100755
--- a/alps/packages/apps/Dialer/res_ext/values/mtk_strings.xml
+++ b/alps/packages/apps/Dialer/res_ext/values/mtk_strings.xml
@@ -24,4 +24,18 @@
     <string name = "can_not_switch_account_during_call">Can not switch preferred SIM for calls during the call.</string>
     <!-- The message of alert dialog when switch account but it is not allowed -->
     <string name = "can_not_switch_account_temporarily">Can not switch preferred SIM for calls temporarily.</string>
+    
+    <!-- Speed Dial phase -->
+    <string name="sd_add">Add</string>
+    <string name="voicemail">Voicemail</string>
+    <string name="reselect_number">The number has already been assigned to a speed dial key, please select another nubmer.</string>
+    <string name="call_speed_dial">Numeric key speed dial</string>
+    <string name="dialog_no_speed_dial_number_message">No speed dial number,is now set?</string>
+    <string name="add_speed_dial">Tap to add speed dial</string>
+    <string name="speed_dial_added"><xliff:g id="contact_name">%1$s</xliff:g> (<xliff:g id="phone_label">%2$s</xliff:g>) added to speed dial <xliff:g id="key">%3$s</xliff:g></string>
+    <string name="speed_dial_added2"><xliff:g id="contact_name">%1$s</xliff:g> added to speed dial <xliff:g id="key">%2$s</xliff:g></string>
+    <string name="remove_speed_dial">Remove</string>
+    <string name="remove_sd_confirm_1">Are you sure you want to remove <xliff:g id="contact_name">%1$s</xliff:g> (<xliff:g id="phone_label">%2$s</xliff:g>) from speed dial <xliff:g id="key">%3$s</xliff:g>?</string>
+    <string name="remove_sd_confirm_2">Are you sure you want to remove <xliff:g id="contact_name">%1$s</xliff:g> from speed dial <xliff:g id="key">%2$s</xliff:g>?</string>        
+    <string name="contact_list_loading">Loading</string>	    
 </resources>
diff --git a/alps/packages/apps/Dialer/src/com/android/dialer/DialtactsActivity.java b/alps/packages/apps/Dialer/src/com/android/dialer/DialtactsActivity.java
old mode 100644
new mode 100755
index f8f7fdb..16a40cc
--- a/alps/packages/apps/Dialer/src/com/android/dialer/DialtactsActivity.java
+++ b/alps/packages/apps/Dialer/src/com/android/dialer/DialtactsActivity.java
@@ -970,7 +970,7 @@ public class DialtactsActivity extends TransactionSafeActivity implements View.O
 
         /// M: add for plug-in. @{
         final Menu menu = popupMenu.getMenu();
-        ExtensionManager.getInstance().getDialPadExtension().buildOptionsMenu(this, menu);
+        ExtensionManager.getInstance().getDialPadCommonExtension().buildOptionsMenu(this, menu); //jianqiu modify 20150710 speeddial
         /// @}
 
         popupMenu.setOnMenuItemClickListener(this);
diff --git a/alps/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java b/alps/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
index 7acdac4..8c48a53 100755
--- a/alps/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
+++ b/alps/packages/apps/Dialer/src/com/android/dialer/SpecialCharSequenceMgr.java
@@ -162,8 +162,8 @@ public class SpecialCharSequenceMgr {
                 /// @}
 				|| ZechinEngineerCode.handleZechinCodeDisplay(context, dialString)//Starmen add for engineer code 20160125
                 /// M: for plug-in @{
-                || ExtensionManager.getInstance().getDialPadExtension().handleChars(context,
-                        dialString)
+                //jianqiu modify 20150710 speeddial
+                || ExtensionManager.getInstance().getDialPadCommonExtension().handleChars(context, dialString)
                 /// @}
                 ) {
             return true;
@@ -202,7 +202,8 @@ public class SpecialCharSequenceMgr {
         // Secret codes are in the form *#*#<code>#*#*
 
         /// M: for plug-in @{
-        input = ExtensionManager.getInstance().getDialPadExtension().handleSecretCode(input);
+        //jianqiu modify 20150710 speeddial
+        input = ExtensionManager.getInstance().getDialPadCommonExtension().handleSecretCode(input);
         /// @}
 
         int len = input.length();
@@ -399,8 +400,7 @@ public class SpecialCharSequenceMgr {
             }
 
             /// M: Add single IMEI plugin. @{
-            deviceIds = ExtensionManager.getInstance().getDialPadExtension().getSingleIMEI(
-                    deviceIds);
+            deviceIds = ExtensionManager.getInstance().getDialPadCommonExtension().getSingleIMEI(deviceIds);
             /// @}
 
             AlertDialog alert = new AlertDialog.Builder(context)
diff --git a/alps/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java b/alps/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java
old mode 100644
new mode 100755
index a58d071..9731234
--- a/alps/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java
+++ b/alps/packages/apps/Dialer/src/com/android/dialer/dialpad/DialpadFragment.java
@@ -398,8 +398,7 @@ public class DialpadFragment extends Fragment
         }
 
         /// M: for Plug-in @{
-        ExtensionManager.getInstance().getDialPadExtension().onCreate(
-                getActivity().getApplicationContext(), this, this);
+        ExtensionManager.getInstance().getDialPadCommonExtension().onCreate(getActivity().getApplicationContext(), this, this); //jianqiu modify 20150710 speeddial
         /// @}
 
         Trace.endSection();
@@ -411,7 +410,7 @@ public class DialpadFragment extends Fragment
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         Trace.beginSection(TAG + " onViewCreated init plugin");
-        ExtensionManager.getInstance().getDialPadExtension().onViewCreated(getActivity(), view);
+        ExtensionManager.getInstance().getDialPadCommonExtension().onViewCreated(getActivity(), view);//jianqiu modify 20150710 speeddial
         Trace.endSection();
     }
 
@@ -437,8 +436,7 @@ public class DialpadFragment extends Fragment
         ///@}
         /// M: for plug-in @{
         Trace.beginSection(TAG + " init plugin view");
-        ExtensionManager.getInstance().getDialPadExtension().onCreateView(inflater, container,
-                savedState, fragmentView);
+        ExtensionManager.getInstance().getDialPadCommonExtension().onCreateView(inflater, container, savedState, fragmentView);//jianqiu modify 20150710 speeddial
         Trace.endSection();
         /// @}
 
@@ -891,7 +889,7 @@ public class DialpadFragment extends Fragment
         }
         ((Context) getActivity()).unregisterReceiver(mCallStateReceiver);
         /// M: for plug-in. @{
-        ExtensionManager.getInstance().getDialPadExtension().onDestroy();
+        ExtensionManager.getInstance().getDialPadCommonExtension().onDestroy();//jianqiu modify 20150710 speeddial
         /// @}
     }
 
@@ -1520,7 +1518,8 @@ public class DialpadFragment extends Fragment
         }
 
         /// M: for plug-in @{
-        ExtensionManager.getInstance().getDialPadExtension().showDialpadChooser(enabled);
+        //jianqiu modify 20150710 speeddial
+        ExtensionManager.getInstance().getDialPadCommonExtension().showDialpadChooser(enabled);
         /// @}
     }
 
@@ -1921,8 +1920,9 @@ public class DialpadFragment extends Fragment
             /// @}
 
             /// M: for Plug-in @{
+            //jianqiu modify 20150710 speeddial
             ExtensionManager.getInstance().
-                    getDialPadExtension().onHiddenChanged(
+                    getDialPadCommonExtension().onHiddenChanged(
                             true, mAnimate ? mDialpadSlideInDuration : 0);
             /// @}
             activity.onDialpadShown();
@@ -1942,9 +1942,10 @@ public class DialpadFragment extends Fragment
         /// @}
 
         /// M: for Plug-in @{
+        //jianqiu modify 20150710 speeddial
         if (hidden && mAnimate) {
             ExtensionManager.getInstance().
-                    getDialPadExtension().onHiddenChanged(false, 0);
+                    getDialPadCommonExtension().onHiddenChanged(false, 0);
         }
         /// @}
     }
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/ext/ExtensionManager.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/ext/ExtensionManager.java
index dcb3b49..f142142 100755
--- a/alps/packages/apps/Dialer/src/com/mediatek/dialer/ext/ExtensionManager.java
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/ext/ExtensionManager.java
@@ -40,6 +40,7 @@ import android.util.Log;
 
 import com.mediatek.common.MPlugin;
 import com.mediatek.common.telephony.ICallerInfoExt;
+import com.mediatek.dialer.speeddial.OP01DialPadExtension; //jianqiu add 20150710 speeddial
 
 public class ExtensionManager {
     private static final String TAG = "DialerExtensionManager";
@@ -135,6 +136,20 @@ public class ExtensionManager {
         }
         return mDialPadExtension;
     }
+	
+//jianqiu add 20150710 speeddial
+    public IDialPadExtension getDialPadCommonExtension() {
+        if (mDialPadExtension == null) {
+            synchronized (IDialPadExtension.class) {
+                if (mDialPadExtension == null) {
+                        mDialPadExtension = new OP01DialPadExtension(mContext);
+                    Log.i(TAG, "[getDialPadExtension]create ext instance: " + mDialPadExtension);
+                }
+            }
+        }
+        return mDialPadExtension;
+    }
+
 
     public ICallLogExtension getCallLogExtension() {
         if (mCallLogExtension == null) {
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/DontPressWithParentImageView.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/DontPressWithParentImageView.java
new file mode 100755
index 0000000..a864b75
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/DontPressWithParentImageView.java
@@ -0,0 +1,28 @@
+package com.mediatek.dialer.speeddial;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ImageView;
+
+
+/**
+ * Special class to to allow the parent to be pressed without being pressed itself.
+ * This way the line of a tab can be pressed, but the image itself is not.
+ */
+public class DontPressWithParentImageView extends ImageView {
+
+    public DontPressWithParentImageView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    public void setPressed(boolean pressed) {
+        // If the parent is pressed, do not set to pressed.
+        if (pressed && ((View) getParent()).isPressed()) {
+            super.setPressed(false);
+            return;
+        }
+        super.setPressed(pressed);
+    }
+}
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/OP01DialPadExtension.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/OP01DialPadExtension.java
new file mode 100755
index 0000000..677dfe2
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/OP01DialPadExtension.java
@@ -0,0 +1,156 @@
+package com.mediatek.dialer.speeddial;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Resources;
+import android.os.SystemProperties;
+import android.text.Editable;
+import android.util.Log;
+import android.view.ContextThemeWrapper;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.MenuItem.OnMenuItemClickListener;
+import android.view.View;
+import android.widget.EditText;
+
+import com.mediatek.common.PluginImpl;
+import com.mediatek.dialer.ext.DefaultDialPadExtension;
+import com.mediatek.dialer.ext.IDialPadExtension;
+
+import com.android.dialer.R;
+import java.util.List;
+
+@PluginImpl(interfaceName="com.mediatek.dialer.ext.IDialPadExtension")
+public class OP01DialPadExtension extends DefaultDialPadExtension implements View.OnLongClickListener{
+
+    private static final String TAG = "OP01DialPadExtension";
+
+    private Activity mHostActivity;
+    private String mHostPackage;
+    private Resources mHostResources;
+    private EditText mEditText;
+    
+    private Context mContext;
+    /**
+     * for op01
+     * @param durationView the duration text
+     */
+
+    public OP01DialPadExtension (Context context) {
+        super();
+        mContext = context;
+    }
+
+    @Override
+    public void buildOptionsMenu(final Activity activity, Menu menu){
+        int index = menu.size();
+        MenuItem speedDialMenu = menu.add(Menu.NONE, index, 0, mContext.getText(R.string.call_speed_dial));
+        speedDialMenu.setOnMenuItemClickListener(new OnMenuItemClickListener() {
+            public boolean onMenuItemClick(MenuItem item) {
+                Log.d(TAG, "SpeedDial onMenuItemClick");
+                SpeedDialController.getInstance().enterSpeedDial(activity);
+                return true;
+            }
+        });
+    }
+
+    @Override
+    public void onViewCreated(Activity activity, View view) {
+        Log.d(TAG, "onViewCreated.");
+        mHostActivity = activity;
+    
+        mHostPackage = activity.getPackageName();
+        mHostResources = activity.getResources();
+
+        View two = (View) view.findViewById(mHostResources.getIdentifier("two",
+                                "id", mHostPackage));
+        two.setOnLongClickListener(this);
+        
+        View three = (View) view.findViewById(mHostResources.getIdentifier("three",
+                                "id", mHostPackage));
+        three.setOnLongClickListener(this);
+        
+        View four = (View) view.findViewById(mHostResources.getIdentifier("four",
+                                "id", mHostPackage));
+        four.setOnLongClickListener(this);
+        
+        View five = (View) view.findViewById(mHostResources.getIdentifier("five",
+                                "id", mHostPackage));
+        five.setOnLongClickListener(this);
+        
+        View six = (View) view.findViewById(mHostResources.getIdentifier("six",
+                                "id", mHostPackage));
+        six.setOnLongClickListener(this);
+        
+        View seven = (View) view.findViewById(mHostResources.getIdentifier("seven",
+                                "id", mHostPackage));
+        seven.setOnLongClickListener(this);
+        
+        View eight = (View) view.findViewById(mHostResources.getIdentifier("eight",
+                                "id", mHostPackage));
+        eight.setOnLongClickListener(this);
+        
+        View nine = (View) view.findViewById(mHostResources.getIdentifier("nine",
+                                "id", mHostPackage));
+        nine.setOnLongClickListener(this);
+
+        mEditText = (EditText) view.findViewById(mHostResources.getIdentifier("digits",
+                                "id", mHostPackage));
+    }
+
+    @Override
+    public boolean onLongClick(View view) {
+        int id = view.getId();
+
+        int key = 0;
+        if (id == mHostResources.getIdentifier("two","id", mHostPackage)) {
+            key = 2;
+        }
+        else if (id == mHostResources.getIdentifier("three","id", mHostPackage)) {
+            key = 3;
+        }
+        else if (id == mHostResources.getIdentifier("four","id", mHostPackage)) {
+            key = 4;
+        }
+        else if (id == mHostResources.getIdentifier("five","id", mHostPackage)) {
+            key = 5;
+        }
+        else if (id == mHostResources.getIdentifier("six","id", mHostPackage)) {
+            key = 6;
+        }
+        else if (id == mHostResources.getIdentifier("seven","id", mHostPackage)) {
+            key = 7;
+        }
+        else if (id == mHostResources.getIdentifier("eight","id", mHostPackage)) {
+            key = 8;
+        }
+        else if (id == mHostResources.getIdentifier("nine","id", mHostPackage)) {
+            key = 9;
+        }
+
+        if (key > 0 && key < 10 && mEditText.getText().length() <= 1) {
+            SpeedDialController.getInstance().handleKeyLongProcess(mHostActivity, mContext, key);
+            mEditText.getText().clear();
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public List<String> getSingleIMEI(List<String> list) {
+        Log.d(TAG, "getSingleIMEI");
+        if (isSigleImeiEnabled()) {
+            if (list.size() > 1) {
+                for (int i = list.size() - 1; i < list.size(); i++) {
+                    list.remove(i);
+                }
+            }
+        }
+        return list;
+    }
+
+    private boolean isSigleImeiEnabled() {
+        return SystemProperties.get("ro.mtk_single_imei").equals("1");
+    }
+}
+
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialActivity.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialActivity.java
new file mode 100755
index 0000000..7af0dfe
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialActivity.java
@@ -0,0 +1,875 @@
+package com.mediatek.dialer.speeddial;
+
+import android.app.ActionBar;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.ListActivity;
+import android.app.ProgressDialog;
+import android.content.AsyncQueryHandler;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.database.Cursor;
+import android.database.MatrixCursor;
+import android.graphics.Rect;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.provider.ContactsContract.CommonDataKinds;
+import android.provider.ContactsContract.CommonDataKinds.Phone;
+import android.provider.ContactsContract.Data;
+import android.provider.ContactsContract.PhoneLookup;
+import android.telephony.PhoneNumberUtils;
+import android.text.method.DialerKeyListener;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.MenuItem;
+import android.view.TouchDelegate;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.SimpleCursorAdapter;
+import android.widget.Toast;
+
+//import com.android.contacts.common.ContactPhotoManager;
+//import com.mediatek.contacts.util.SimContactPhotoUtils;
+import com.android.dialer.R;
+
+import java.util.ArrayList;
+
+public class SpeedDialActivity extends ListActivity implements View.OnClickListener,
+        DialogInterface.OnClickListener, DialogInterface.OnShowListener {
+
+    public static final String PREF_NAME = "speed_dial";
+    private static final int QUERY_TOKEN = 47;
+    private static final int VIEW_EDGE = 30;
+    private static final int SPEED_DIAL_DIALOG_ADD = 1;
+
+    private String TAG = "SpeedDialActivity";
+
+    private SharedPreferences       mPref;
+    private int                     mIndex;
+    private int                     mQueryTimes;
+    private ListView                mListView;
+    private SpeedDialQueryHandler   mQueryHandler;
+    private MatrixCursor            mMatrixCursor;
+    private SimpleCursorAdapter     mSimpleCursorAdapter; 
+    private AlertDialog             mRemoveConfirmDialog = null;
+
+    //private ContactPhotoManager     mContactPhotoManager;
+    private boolean                 mIsWaitingActivityResult;
+    public Uri mUri = Uri.parse("content://speed_dial/numbers");
+        
+    private int mAddPosition = -1;
+    private int mRemovePosition = -1;
+
+    static final int SPEED_DIAL_MIN = 2;
+    static final int SPEED_DIAL_MAX = 9;
+    private static final int LIST_CAPACITY = 9;
+
+    private ProgressDialog mProgressDialog = null;
+    private static final int WAIT_CURSOR_START = 1000;
+    private static final long WAIT_CURSOR_DELAY_TIME = 500;
+
+    private boolean mActivityDestroyed = false;
+
+    private SimReceiver mSimReceiver;
+    public static final String ACTION_PHB_LOAD_FINISHED = "com.android.contacts.ACTION_PHB_LOAD_FINISHED";
+
+    // For SharePreference
+    private String[] mPrefNumState = {
+        "", "", "", "", "", "", "", "", "", ""
+    };
+
+    //For adapter
+    public static final String[] DATA_FROM = {
+        PhoneLookup._ID,
+        PhoneLookup.DISPLAY_NAME,
+        PhoneLookup.TYPE,
+        PhoneLookup.NUMBER,
+        PhoneLookup.PHOTO_ID,
+        PhoneLookup.INDICATE_PHONE_SIM
+    };
+
+    public static final int[] ID_TO = {
+        R.id.sd_index, 
+        R.id.sd_name, 
+        R.id.sd_label, 
+        R.id.sd_number, 
+        R.id.sd_photo,
+        R.id.sd_remove,        
+    };
+
+    //For query
+    static final String[] QUERY_PROJECTION = {
+            PhoneLookup._ID, // 0
+            PhoneLookup.DISPLAY_NAME, // 1
+            PhoneLookup.TYPE, // 2
+            PhoneLookup.NUMBER, // 3
+            PhoneLookup.INDICATE_PHONE_SIM, // 4
+            PhoneLookup.PHOTO_ID, // 5
+            PhoneLookup.LABEL, // 6
+    };
+
+    static final int QUERY_DISPLAY_NAME_INDEX = 1;
+    static final int QUERY_LABEL_INDEX = 2;
+    static final int QUERY_NUMBER_INDEX = 3;
+    static final int QUERY_INDICATE_PHONE_SIM_INDEX = 4;
+    static final int QUERY_PHOTO_ID_INDEX = 5;
+    static final int QUERY_CUSTOM_LABEL_INDEX = 6;
+
+    static final int BIND_ID_INDEX = 0;
+    static final int BIND_DISPLAY_NAME_INDEX = 1;
+    static final int BIND_LABEL_INDEX = 2;
+    static final int BIND_NUMBER_INDEX = 3;
+    static final int BIND_PHOTO_ID_INDEX = 4;
+    static final int BIND_INDICATE_PHONE_SIM_INDEX = 5;
+
+    private static int REQUEST_CODE_PICK_CONTACT = 1;
+
+    private ArrayList<QueueItem> mToastQueue = new ArrayList<QueueItem>();
+    
+    public void onListItemClick(ListView l, View v, int position, long id) {
+        if (position == 0 || !TextUtils.isEmpty(mPrefNumState[position + 1])) {
+            return;
+        }
+
+        mAddPosition = position;
+        showDialog(SPEED_DIAL_DIALOG_ADD);
+        return;
+    }
+
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        Log.d(TAG, "onActivityResult() mAddPosition:" + mAddPosition);
+        mIsWaitingActivityResult = false;
+        if (requestCode != REQUEST_CODE_PICK_CONTACT || RESULT_OK != resultCode || data == null) {
+            return;
+        }
+
+        String index = data.getData().getLastPathSegment();
+        String number = "";
+        Cursor cursor = this.getContentResolver().query(Data.CONTENT_URI, new String[] {
+                Data._ID, Data.DATA1
+            }, "Data._ID" + " = " + index, null, null);
+
+        Log.i(TAG, "onActivityResult: index = " + index);
+        if (cursor != null && cursor.getCount() > 0) {
+            cursor.moveToFirst();
+            number = cursor.getString(1);
+        } else {
+            if (cursor != null) {
+                cursor.close();
+            }
+            return;
+        }
+        cursor.close();    
+
+        Log.i(TAG, "onActivityResult: number = " + number);
+        if (findKeyByNumber(number) > -1) {
+            mMatrixCursor.moveToPosition(-1);
+            Toast.makeText(this, getString(R.string.reselect_number), Toast.LENGTH_LONG).show();
+            return;
+        } else {
+            getPrefStatus();
+            mPrefNumState[mAddPosition + 1] = number;
+            SharedPreferences.Editor editor = mPref.edit();
+            editor.putString(String.valueOf(mAddPosition + 1), mPrefNumState[mAddPosition + 1]);
+            editor.apply(); 
+
+            updateSpeedDial(mAddPosition + 1,number);
+
+            enQueueItem(mAddPosition);
+        }
+    }
+
+    private int findKeyByNumber(String number) {
+        for (int i = SPEED_DIAL_MIN; i < SPEED_DIAL_MAX + 1; i++) {
+            if (shouldCollapse(this, number, mPrefNumState[i])) {
+                return i;
+            }
+        }
+        return -1;
+    }
+
+    public static final boolean shouldCollapse(Context context, CharSequence data1, CharSequence data2) {
+        if (data1 == data2) {
+            return true;
+        }
+        
+        if (data1 == null || data2 == null) {
+            return false;
+        }
+
+        if (TextUtils.equals(data1, data2)) {
+            return true;
+        }
+
+        String[] dataParts1 = data1.toString().split(String.valueOf(PhoneNumberUtils.WAIT));
+        String[] dataParts2 = data2.toString().split(String.valueOf(PhoneNumberUtils.WAIT));
+        if (dataParts1.length != dataParts2.length) {
+            return false;
+        }
+        
+        for (int i = 0; i < dataParts1.length; i++) {
+            if (!PhoneNumberUtils.compare(context, dataParts1[i], dataParts2[i])) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+        
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Log.d(TAG, "onCreate() , begin");
+
+        //mContactPhotoManager = ContactPhotoManager.getInstance(this);
+
+        mListView = getListView();
+        mSimpleCursorAdapter = new SimpleCursorAdapter(this, R.layout.mtk_speed_dial_list_item, null,
+                DATA_FROM, ID_TO);
+        mSimpleCursorAdapter.setViewBinder(new SimpleCursorAdapter.ViewBinder() {
+            public boolean setViewValue(final View view, Cursor cursor, int columnIndex) {
+                boolean isEmpty = TextUtils.isEmpty(cursor.getString(BIND_NUMBER_INDEX));
+                int viewId = view.getId();
+                if (viewId == R.id.sd_photo) {
+                    view.setVisibility(View.GONE);
+                    view.setClickable(false);
+                    if (!isEmpty) {
+                        //view.setBackgroundDrawable(null);
+                        //mContactPhotoManager.loadThumbnail((ImageView) view, Long.valueOf(
+                                //cursor.getString(BIND_PHOTO_ID_INDEX)).longValue(), true);
+                    }
+                    return true;
+                } else if (viewId == R.id.sd_label) {
+                    view.setVisibility(isEmpty ? View.GONE : View.VISIBLE);                    
+                } else if (viewId == R.id.sd_number) {
+                    view.setVisibility(isEmpty ? View.GONE : View.VISIBLE);
+                } else if (viewId == R.id.sd_name) {
+                    view.setEnabled(!isEmpty
+                            || TextUtils.equals(cursor.getString(BIND_ID_INDEX), "1"));
+
+                } else if (viewId == R.id.sd_remove) {
+                    view.setVisibility(isEmpty ? View.GONE : View.VISIBLE);
+                    view.setOnClickListener(SpeedDialActivity.this);
+                    if (!isEmpty) {
+                       final View parent = (View) view.getParent();
+                       parent.post(new Runnable() {
+                           public void run() {
+                               final Rect r = new Rect();
+                               view.getHitRect(r);
+                               r.top -= VIEW_EDGE;
+                               r.bottom += VIEW_EDGE;
+                               r.left -= VIEW_EDGE;
+                               r.right += VIEW_EDGE;
+                               parent.setTouchDelegate(new TouchDelegate(r, view));
+                           }
+                       });
+                    } else {
+                        final View parent = (View) view.getParent();
+                        parent.post(new Runnable() {
+                            public void run() {
+                                parent.setTouchDelegate(null);
+                            }
+                        });
+                    }
+                    return true;
+                }
+                return false;
+            }
+        });
+
+        mQueryHandler = new SpeedDialQueryHandler(this);
+        mListView.setAdapter(mSimpleCursorAdapter);
+
+        mSimReceiver = new SimReceiver(this);
+        mSimReceiver.register();
+
+        ActionBar actionBar = getActionBar();
+        if (actionBar != null) {
+            // android.R.id.home will be triggered in onOptionsItemSelected()
+            actionBar.setDisplayHomeAsUpEnabled(true);
+        }        
+        Log.d(TAG, "onCreate() , end");
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        Log.d(TAG, "onStart end");
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        getPrefStatus();
+
+        startQuery();
+        Log.d(TAG, "onResume end");
+    }
+
+    @Override
+    protected void onPause() {
+        Log.d(TAG, "onPause");
+        super.onPause();
+    }
+
+    @Override
+    public void onStop() {
+        Log.d(TAG, "onStop");
+        super.onStop();
+
+        dismissProgressIndication();
+    }
+
+    @Override
+    protected void onDestroy() {
+        Log.d(TAG, "onDestroy");
+        super.onDestroy();
+
+        mSimReceiver.unregister();
+        if (mMatrixCursor != null) {
+            mMatrixCursor.close();
+        }
+        mActivityDestroyed = true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+        case android.R.id.home:
+            finish();
+            return true;
+        default:
+            break;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+    
+    @Override
+    protected Dialog onCreateDialog(int id) {
+        if (SPEED_DIAL_DIALOG_ADD ==  id) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setTitle(R.string.call_speed_dial);
+            builder.setPositiveButton(R.string.sd_add, this);
+            builder.setNegativeButton(android.R.string.cancel, this);
+            builder.setView(View.inflate(this, R.layout.mtk_speed_dial_input_dialog, null));
+            Dialog dialog = builder.create();
+            dialog.setOnShowListener(this);
+            return dialog;
+        }
+        return null;
+    }
+
+    private void getPrefStatus() {
+        Log.i(TAG, "getPrefStatus()");
+        mPref = getSharedPreferences(PREF_NAME, Context.MODE_WORLD_READABLE
+                | Context.MODE_WORLD_WRITEABLE);
+        for (int i = SPEED_DIAL_MIN; i < SPEED_DIAL_MAX + 1; ++i) {
+            mPrefNumState[i] = mPref.getString(String.valueOf(i), "");
+        }
+    }
+
+    private void initMatrixCursor() {
+        // if (mMatrixCursor != null) mMatrixCursor.close();
+        mMatrixCursor = new MatrixCursor(DATA_FROM, LIST_CAPACITY);
+        mMatrixCursor.addRow(new String[] {
+                "1", getResources().getString(R.string.voicemail), "", "", "", ""
+        });
+        mQueryTimes = SPEED_DIAL_MIN;
+    }
+
+    private void startQuery() {
+        Log.i(TAG, "startQuery");
+        mDialogHandler.sendMessageDelayed(mDialogHandler.obtainMessage(WAIT_CURSOR_START),
+                WAIT_CURSOR_DELAY_TIME);
+
+        initMatrixCursor();
+        goOnQuery();
+    }
+
+    private void goOnQuery() {
+        Log.i(TAG, "goOnQuery");
+        
+        int end;
+        for (end = mQueryTimes;  end < SPEED_DIAL_MAX + 1 && TextUtils.isEmpty(mPrefNumState[end]); ++end) {
+            Log.v(TAG, "log for empry block, index = " + end);
+            populateMatrixCursorEmpty(this, mMatrixCursor, end, "");
+        }
+
+        Log.i(TAG, "goOnQuery, end = " + end);
+        if (end > SPEED_DIAL_MAX) {
+            mSimpleCursorAdapter.changeCursor(mMatrixCursor);
+            mSimpleCursorAdapter.notifyDataSetChanged();
+            
+            processQueue();
+            updatePreferences();
+
+            mDialogHandler.removeMessages(WAIT_CURSOR_START);
+            dismissProgressIndication();
+        } else {
+
+            QueryInfo info = new QueryInfo();
+            mQueryTimes = end;
+            info.mQueryIndex = mQueryTimes;
+
+            Log.i(TAG, "goOnQuery(), startQuery at mQueryTimes = " + mQueryTimes);
+            Log.i(TAG, "goOnQuery(), number = " + mPrefNumState[mQueryTimes]);
+            Uri uri = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, Uri
+                    .encode(mPrefNumState[mQueryTimes]));
+            mQueryHandler.startQuery(QUERY_TOKEN, null, uri, QUERY_PROJECTION, null, null, null);
+        }
+        
+        
+    }
+
+    private void populateMatrixCursorEmpty(Context cnx, MatrixCursor cursor, int id, String number) {
+        Log.i(TAG, "populateMatrixCursorEmpty, id = " + id);
+        if (TextUtils.isEmpty(number)) {
+            cursor.addRow(new String[]{
+                String.valueOf(id),
+                cnx.getResources().getString(R.string.add_speed_dial), "", "", "0", "-1"});
+        } else {
+            cursor.addRow(new String[]{
+                String.valueOf(id),
+                number, "", number, "0", "-1"});        
+        }
+    }
+
+    //Need update lable && simcard icon
+    private void populateMatrixCursorRow(int row, Cursor cursor) {
+        cursor.moveToFirst();
+        String name = cursor.getString(QUERY_DISPLAY_NAME_INDEX);
+        int type = cursor.getInt(QUERY_LABEL_INDEX);
+        String label = "";
+        if (type == 0) {
+            label = cursor.getString(QUERY_CUSTOM_LABEL_INDEX);
+        } else {
+            label = (String) CommonDataKinds.Phone.getTypeLabel(getResources(), type, null);
+        }
+        String number = cursor.getString(QUERY_NUMBER_INDEX);
+        long photoId = cursor.getLong(QUERY_PHOTO_ID_INDEX);
+        int simId = -1;
+        if (!cursor.isNull(QUERY_INDICATE_PHONE_SIM_INDEX)) {
+            simId = cursor.getInt(QUERY_INDICATE_PHONE_SIM_INDEX);
+        }
+        Log.i(TAG, "populateMatrixCursorRow(), name = " + name + ", label = " + label
+                + ", number = " + number + " photoId:" + photoId + "simId: " + simId);
+
+        if (simId > 0) {
+            //photoId = SimContactPhotoUtils.getSimContactPhotoId(simId, false);
+        }
+
+        if (TextUtils.isEmpty(number)) {
+            populateMatrixCursorEmpty(this, mMatrixCursor, row, "");
+            mPrefNumState[row] = mPref.getString(String.valueOf(row), "");
+            updateSpeedDial(row, "");
+            return;
+        }
+        mMatrixCursor.addRow(new String[] {
+                String.valueOf(row), name, label,
+                number, String.valueOf(photoId), String.valueOf(simId)});
+    }
+
+
+    public void onClick(View v) {
+        if (v.getId() == R.id.sd_remove) {
+            for(int i = 0;  i < mListView.getCount(); i++) {
+                if (mListView.getChildAt(i) == v.getParent()) {
+                    confirmRemovePosition(i + mListView.getFirstVisiblePosition());
+                    return;
+                }
+            }
+        } else if (v.getId() == R.id.contacts) {
+            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+
+            ComponentName component = new ComponentName("com.android.contacts", 
+                                                "com.android.contacts.activities.ContactSelectionActivity");
+            intent.setComponent(component);
+            intent.setType(Phone.CONTENT_ITEM_TYPE);
+            startActivityForResult(intent, REQUEST_CODE_PICK_CONTACT);
+
+            dismissDialog(SPEED_DIAL_DIALOG_ADD);
+            Log.d(TAG, "[startActivityForResult], mAddPosition = " + mAddPosition);
+        }
+    }
+
+    public void onClick(DialogInterface dialog, int which) {
+        if (which == DialogInterface.BUTTON_POSITIVE) {
+            EditText editText = (EditText) ((AlertDialog) dialog).findViewById(R.id.number);
+            final String number = editText.getText().toString();
+            if (TextUtils.isEmpty(number)) {
+                return;
+            }
+
+            if (-1 == findKeyByNumber(number)) {
+                mPrefNumState[mAddPosition + 1] = number;
+
+                SharedPreferences.Editor editor = mPref.edit();
+                editor.putString(String.valueOf(mAddPosition + 1), number);
+                editor.commit();
+
+                updateSpeedDial(mAddPosition + 1,number);
+
+                startQuery();
+
+                enQueueItem(mAddPosition);
+                Log.i(TAG, "[onClick], mAddPosition =" + mAddPosition);
+            } else {
+                Toast.makeText(this, getString(R.string.reselect_number), Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+
+    public void onShow(DialogInterface dialog) {
+        EditText editText = (EditText) ((AlertDialog) dialog).findViewById(R.id.number);
+        if (!TextUtils.isEmpty(mPrefNumState[mAddPosition + 1])) {
+            editText.setText(mPrefNumState[mAddPosition + 1]);
+            editText.setSelection(mPrefNumState[mAddPosition + 1].length());
+        } else {
+            editText.setText("");
+        } 
+
+        editText.setKeyListener(InputKeyListener.getInstance());
+        ImageView imageView = (ImageView) ((AlertDialog) dialog).findViewById(R.id.contacts);
+        imageView.setOnClickListener(this);
+    }
+
+
+    public void confirmRemovePosition(int position) {
+        if (position < 1 && position > 9) {
+            Log.i(TAG, "position out of bound, do nothing");
+            return;
+        }
+
+        Cursor c = (Cursor) mSimpleCursorAdapter.getItem(position);
+        if (c == null) {
+            Log.d(TAG, "[confirmRemovePosition] the cursor for the position is null");
+            return;
+        }
+
+        mRemovePosition =  position;
+        String name = c.getString(BIND_DISPLAY_NAME_INDEX);
+        String label = c.getString(BIND_LABEL_INDEX);
+        String message;
+        if (TextUtils.isEmpty(label)) {
+            message = getString(R.string.remove_sd_confirm_2, name, String.valueOf(position + 1));
+        } else {
+            message = getString(R.string.remove_sd_confirm_1, name, label, String
+                    .valueOf(position + 1));
+        }
+        Log.d(TAG, "confirmRemovePosition(), message= " + message);
+        if (mRemoveConfirmDialog == null) {
+            mRemoveConfirmDialog = new AlertDialog.Builder(this).setCancelable(true)
+                    .setOnCancelListener(new DialogInterface.OnCancelListener() {
+                        public void onCancel(DialogInterface arg0) {
+                            // TODO Auto-generated method stub
+                            mRemovePosition = -1;
+                            mRemoveConfirmDialog = null;
+                        }
+                    }).setTitle(R.string.remove_speed_dial).setIcon(
+                            android.R.drawable.ic_dialog_alert).setMessage(message)
+                    .setPositiveButton(R.string.remove_speed_dial,
+                            new DialogInterface.OnClickListener() {
+                                public void onClick(DialogInterface dialog, int which) {
+                                    actuallyRemove();
+                                    mRemovePosition = -1;
+                                    mRemoveConfirmDialog = null;
+                                }
+                            }).setNegativeButton(android.R.string.cancel,
+                            new DialogInterface.OnClickListener() {
+
+                                public void onClick(DialogInterface dialog, int which) {
+                                    mRemovePosition = -1;
+                                    mRemoveConfirmDialog = null;
+                                }
+                            }).create();
+        }
+        mRemoveConfirmDialog.show();   
+    }
+
+    private void updatePreferences() {
+        SharedPreferences.Editor editor = mPref.edit();
+        for (int i = SPEED_DIAL_MIN; i < SPEED_DIAL_MAX + 1; ++i) {
+            editor.putString(String.valueOf(i), mPrefNumState[i]);
+        }
+        editor.apply();
+    }
+
+    private void actuallyRemove() {
+        mPrefNumState[mRemovePosition + 1] = "";
+        SharedPreferences.Editor editor = mPref.edit();
+        editor.putString(String.valueOf(mRemovePosition + 1), mPrefNumState[mRemovePosition + 1]);
+        editor.apply();
+
+        startQuery();
+
+        updateSpeedDial(mRemovePosition + 1, "");
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle state) {
+        Log.i(TAG, "onRestoreInstanceState");
+        super.onRestoreInstanceState(state);
+        mAddPosition = state.getInt("add_position", -1);
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        Log.i(TAG, "onSaveInstanceState");
+        if (mAddPosition != -1) {
+            outState.putInt("add_position", mAddPosition);
+        }    
+        super.onSaveInstanceState(outState);
+    }
+
+    private void enQueueItem(int index) {
+        Log.i(TAG, "enQueueItem(), index = " + index);
+        mToastQueue.add(new QueueItem(index));
+    }
+
+    private void processQueue() {
+        if (mToastQueue != null) {
+            for (QueueItem item : mToastQueue) {
+                Log.i(TAG, "processQueue, item index = " + item.index);
+                item.run();
+            }
+            mToastQueue.clear();
+        }
+    }
+
+    private Handler mDialogHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            Log.i(TAG, "handleMessage msg==== " + msg.what);
+
+            switch (msg.what) {
+
+                case WAIT_CURSOR_START:
+                    Log.i(TAG, "start WAIT_CURSOR_START showProgressIndication.");
+                    showProgressIndication();
+                    break;
+
+                default:
+                    break;
+            }
+        }
+    };
+
+    private void showProgressIndication() {
+        Log.i(TAG, "loading contacts... ");
+        if (mActivityDestroyed) {
+            Log.i(TAG, "showProgressIndication(),the master Activity is destroyed!");
+            return;
+        }
+
+        dismissProgressIndication(); // Clean up any prior progress indication
+
+        mProgressDialog = new ProgressDialog(this);
+        mProgressDialog.setMessage(this.getResources().getString(R.string.contact_list_loading));
+        mProgressDialog.setIndeterminate(true);
+        mProgressDialog.setCancelable(false);
+        mProgressDialog.show();
+    }
+
+    private void dismissProgressIndication() {
+        if (mProgressDialog != null && mProgressDialog.isShowing()) {
+            try {
+                mProgressDialog.dismiss(); // safe even if already dismissed
+            } catch (Exception e) {
+                Log.i(TAG, "dismiss exception: " + e);
+            }
+            mProgressDialog = null;
+        }
+    }
+
+
+    private class SpeedDialQueryHandler extends AsyncQueryHandler{
+        SpeedDialQueryHandler(Context context) {
+            super(context.getContentResolver());
+        }
+
+        @Override
+        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
+            Log.d(TAG, "onQueryComplete(), cursor = " + cursor);
+
+            if (cookie instanceof QueryInfo) {
+                int index = ((QueryInfo) cookie).mQueryIndex;
+                Log.d(TAG, "onQueryComplete(), index = " + index + ", mQueryTimes = " + mQueryTimes);
+                if (index != mQueryTimes) {
+                    if (cursor != null) {
+                        cursor.close();
+                    }
+                    return;
+                }
+            }
+
+        
+            if (mQueryTimes < SPEED_DIAL_MAX + 1 && cursor != null && cursor.getCount() > 0) {
+                populateMatrixCursorRow(mQueryTimes, cursor);
+            } else if (mQueryTimes < SPEED_DIAL_MAX + 1){
+                populateMatrixCursorEmpty(SpeedDialActivity.this, mMatrixCursor, mQueryTimes, mPrefNumState[mQueryTimes]);
+            }
+
+            if (cursor != null) {
+                cursor.close();
+            }
+        
+            if (mQueryTimes < SPEED_DIAL_MAX) {
+                mQueryTimes++;
+                goOnQuery();
+            } else {
+                mSimpleCursorAdapter.changeCursor(mMatrixCursor);
+                mSimpleCursorAdapter.notifyDataSetChanged();
+
+                processQueue();
+                updatePreferences();
+
+                mDialogHandler.removeMessages(WAIT_CURSOR_START);
+                dismissProgressIndication();
+            }
+        }
+    }
+
+    private void updateSpeedDial(int id, String number) {
+        SpeedDialArgs args = new SpeedDialArgs(SpeedDialActivity.this, id, number, mUri);
+        new UpdateSpeedDialTask().execute(args);
+    }
+    
+    private class SpeedDialArgs {      
+        public SpeedDialArgs(Context context, int id, String number, Uri uri) {
+            this.mContext = context;
+            this.mIndex = id;
+            this.mNumber = number;
+            this.mUri = uri;
+        }
+        public Uri mUri;
+        public Context mContext;
+        public int mIndex;
+        public String mNumber;
+    }
+
+    private class UpdateSpeedDialTask extends AsyncTask<SpeedDialArgs, Void, Void> {
+        @Override
+        protected Void doInBackground(SpeedDialArgs... argList) {
+            int count = argList.length;
+            for (int i = 0; i < count; i ++) {
+                SpeedDialArgs arg = argList[i];
+                Context context = arg.mContext;
+                ContentValues value = new ContentValues();
+                value.put("number", arg.mNumber);
+                context.getContentResolver().update(arg.mUri, value, "_id" + " = " + arg.mIndex, null);
+                Log.i(TAG, "UpdateSpeedDialTask(), doInBackground");
+            }
+            return null;
+        }
+    }
+
+    private static class InputKeyListener extends DialerKeyListener {
+        private static InputKeyListener sKeyListener;
+        public static final char[] CHARACTERS = new char[] { '0', '1', '2',
+            '3', '4', '5', '6', '7', '8', '9', '+', '*', '#',',',';'};
+
+        @Override
+        protected char[] getAcceptedChars() {
+            return CHARACTERS;
+        }
+        public static InputKeyListener getInstance() {
+            if (sKeyListener == null) {
+                sKeyListener = new InputKeyListener();
+            }
+            return sKeyListener;
+        }
+    }
+
+    private class QueueItem {
+        private int index;
+        private Runnable runnable;
+        QueueItem(int id) {
+            this.index = id;
+            this.initialize();
+        }
+        
+        private void initialize() {
+            this.runnable = new Runnable() {
+                @Override
+                public void run() {
+
+                    mMatrixCursor.moveToPosition(QueueItem.this.index);
+                    if (QueueItem.this.index < SPEED_DIAL_MIN - 1) {
+                        Log.i(TAG, "Toast index is invalid, just return");
+                        return;
+                    }
+
+                    CharSequence name = mMatrixCursor.getString(BIND_DISPLAY_NAME_INDEX);
+                    CharSequence label = mMatrixCursor.getString(BIND_LABEL_INDEX);
+
+                    CharSequence fullInfo;
+                    if (TextUtils.isEmpty(label)) {
+                        fullInfo = getString(R.string.speed_dial_added2, name, String.valueOf(QueueItem.this.index + 1));
+                    } else {
+                        fullInfo = getString(R.string.speed_dial_added, name, label, String.valueOf(QueueItem.this.index + 1));
+                    }
+                    Toast.makeText(SpeedDialActivity.this, fullInfo, Toast.LENGTH_LONG).show();
+                }
+            };
+        }
+
+        public void run() {
+            this.runnable.run();
+        }
+    }
+
+    private class QueryInfo {
+        int mQueryIndex;
+    }
+
+    private class SimReceiver extends BroadcastReceiver {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            final String action = intent.getAction();
+            Log.i(TAG, "[SimReceiver.onReceive]action is " + action);
+            refreshUi();
+        }
+
+        private void refreshUi() {
+            mRefreshHandler.sendEmptyMessage(0);
+        }
+
+        public void register() {
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(ACTION_PHB_LOAD_FINISHED);
+            mContext.registerReceiver(this, filter);
+        }
+
+        public void unregister() {
+            mContext.unregisterReceiver(this);
+        }
+
+        public SimReceiver(Context context) {
+            mContext = context;
+        }
+
+        private Context mContext;
+        private Handler mRefreshHandler = new Handler() {
+            @Override
+            public void handleMessage(Message msg) {
+                Log.d(TAG, "[SimReceiver.handleMessage] update UI due to SIMService finished");
+                initMatrixCursor();
+                goOnQuery();
+            }
+        };
+    }
+}    
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialController.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialController.java
new file mode 100755
index 0000000..f2678f3
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/SpeedDialController.java
@@ -0,0 +1,88 @@
+package com.mediatek.dialer.speeddial;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.database.Cursor;
+import android.net.Uri;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.dialer.R;
+    
+public class SpeedDialController {
+    private static final String TAG = "SpeedDialController";
+    private static SpeedDialController sMe;
+    private Context mfContext;
+    private Context mContext;
+    Uri uri = Uri.parse("content://speed_dial/numbers");
+    
+    private void SpeedDialController() {
+    }
+
+    public static SpeedDialController getInstance() {
+        if (sMe == null) {
+            sMe = new SpeedDialController();
+        }
+        return sMe;
+    }
+
+    public void handleKeyLongProcess(Activity activity, Context cnx, int key) {
+        mfContext = activity;
+        mContext = cnx;
+        Cursor cursor = mContext.getContentResolver().query(uri, new String[] {"_id", "number"}, "_id" + " = " + key, null, null);
+
+        String number = "";
+        if (cursor!= null) {
+            if (cursor.moveToFirst()) {
+                int columnIndex = cursor.getColumnIndex("number");
+                if (columnIndex != -1) {
+                    number = cursor.getString(columnIndex);
+                }
+            }
+            cursor.close();
+        }
+        Log.i(TAG, "handleKeyLongProcess, key = " + key);
+        Log.i(TAG, "handleKeyLongProcess, number = " + number);
+        if (TextUtils.isEmpty(number)) {
+            showSpeedDialConfirmDialog();
+        } else {
+            final Intent intent = new Intent(Intent.ACTION_CALL_PRIVILEGED, Uri.fromParts("tel",
+                    number, null));
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            mfContext.startActivity(intent);
+        }
+    }
+
+    public void enterSpeedDial(Context fcnx) {
+        Log.i(TAG, "enterSpeedDial");
+        final Intent intent = new Intent();
+        intent.setClassName("com.android.dialer", "com.mediatek.dialer.speeddial.SpeedDialActivity");
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        fcnx.startActivity(intent);
+    }
+
+    public void showSpeedDialConfirmDialog() {
+        Log.i(TAG, "showSpeedDialConfirmDialog");
+        AlertDialog confirmDialog = new AlertDialog.Builder(mfContext)
+            .setTitle(mContext.getString(R.string.call_speed_dial))
+            .setMessage(mContext.getString(R.string.dialog_no_speed_dial_number_message))
+            .setPositiveButton(android.R.string.ok,
+                new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+                            enterSpeedDial(mfContext);
+                        }
+                }).setNegativeButton(android.R.string.cancel,
+                new DialogInterface.OnClickListener() {
+                        public void onClick(DialogInterface dialog, int which) {
+                        }
+            }).create();
+        confirmDialog.show();
+    }
+}
+
+
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDial.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDial.java
new file mode 100755
index 0000000..3658822
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDial.java
@@ -0,0 +1,18 @@
+package com.mediatek.dialer.speeddial.provider;
+
+import android.net.Uri;
+
+import android.provider.BaseColumns;
+
+class SpeedDial {
+
+    public static final String AUTHORITY = "speed_dial";
+    public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY);
+
+
+    public static class Numbers implements BaseColumns {
+        public static final Uri CONTENT_URI = Uri.parse("content://speed_dial/numbers");
+        public static final String CONTENT_TYPE = "vnd.android.cursor.dir/numbers";
+        public static final String NUMBER = "number";
+    }
+}
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialDatabaseHelper.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialDatabaseHelper.java
new file mode 100755
index 0000000..2ea017b
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialDatabaseHelper.java
@@ -0,0 +1,55 @@
+package com.mediatek.dialer.speeddial.provider;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+class SpeedDialDatabaseHelper extends SQLiteOpenHelper{
+
+    private final static String TAG = "SpeedDialDatabaseHelper";
+    private static final int DATABASE_VERSION = 1;
+    private static final String DATABASE_NAME = "speeddial.db";
+    private static SpeedDialDatabaseHelper sMe;
+    public interface Tables {
+        static final String SPEEDDIAL = "speeddials";
+    }
+
+
+    public static synchronized SpeedDialDatabaseHelper getInstance(Context context) {
+        if (sMe == null) {
+            sMe = new SpeedDialDatabaseHelper(context, DATABASE_NAME, true);
+        }
+        return sMe;        
+    }
+
+    protected SpeedDialDatabaseHelper(Context context, String databaseName,
+                                            boolean optimizationEnabled) {
+        super(context, databaseName, null, DATABASE_VERSION);
+    }
+
+    @Override 
+    public void onCreate(SQLiteDatabase db) {
+        db.execSQL("CREATE TABLE " + Tables.SPEEDDIAL + " (" +
+            SpeedDial.Numbers._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
+            SpeedDial.Numbers.NUMBER + " TEXT" +
+            ");");
+        initSpeedDialTable(db);
+    }
+    
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+    }
+
+    private void initSpeedDialTable(SQLiteDatabase db) {
+        for (int i = 0; i < 10; i++) {
+            db.execSQL("INSERT INTO " + Tables.SPEEDDIAL + " (" +
+                SpeedDial.Numbers.NUMBER + ") " +
+                "VALUES('" + "" + "'" +
+                ");");
+        }
+    }
+    
+}
+
diff --git a/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialProvider.java b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialProvider.java
new file mode 100755
index 0000000..1f55f1c
--- /dev/null
+++ b/alps/packages/apps/Dialer/src/com/mediatek/dialer/speeddial/provider/SpeedDialProvider.java
@@ -0,0 +1,125 @@
+package com.mediatek.dialer.speeddial.provider;
+
+import android.content.ContentProvider;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.UriMatcher;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.net.Uri;
+import android.util.Log;
+
+import com.mediatek.dialer.speeddial.provider.SpeedDial;
+import com.mediatek.dialer.speeddial.provider.SpeedDialDatabaseHelper.Tables;
+
+public class SpeedDialProvider extends ContentProvider{
+
+    private static final String TAG = "SpeedDialProvider";
+    private static final int SPEEDDIAL = 1;
+    private SpeedDialDatabaseHelper mDbHelper;
+    
+    private static final UriMatcher URIMATCHER = new UriMatcher(UriMatcher.NO_MATCH);
+    static {
+        URIMATCHER.addURI(SpeedDial.AUTHORITY, "numbers", SPEEDDIAL);
+    }
+
+    protected SpeedDialDatabaseHelper getDatabaseHelper(Context context) {
+        SpeedDialDatabaseHelper dbHelper = SpeedDialDatabaseHelper.getInstance(context);
+        return dbHelper;
+    }
+
+    @Override
+    public boolean onCreate() {
+        Log.i(TAG, "onCreate");
+        mDbHelper = getDatabaseHelper(getContext());
+        //initSpeedDialTable(mDbHelper.getWritableDatabase());
+        return true;
+    }
+
+    private void initSpeedDialTable(SQLiteDatabase db) {
+        Log.i(TAG, "initSpeedDialTable");
+        ContentValues[] valueArray = new ContentValues[10];
+        for (int i = 0; i < 10; i++) {
+            valueArray[i] = new ContentValues();
+            valueArray[i].put(SpeedDial.Numbers.NUMBER, "");
+        }
+
+        int numValue = 0;
+        db.beginTransaction();
+        try {
+            numValue = valueArray.length;
+            for (int i = 0; i < numValue; i++) {
+                insert(SpeedDial.Numbers.CONTENT_URI,valueArray[i]);
+            }
+            db.setTransactionSuccessful();
+        } finally {
+            db.endTransaction();
+        } 
+    }
+
+    @Override
+    public String getType(Uri uri) {
+        int match = URIMATCHER.match(uri);
+        switch (match) {
+            case SPEEDDIAL:
+                return SpeedDial.Numbers.CONTENT_TYPE;
+            default:
+                throw new IllegalArgumentException("Unknown URL " + uri);
+        }
+    }
+    
+    @Override    
+    public Cursor query(Uri uri, String[] projection, String selection,
+                            String[] selectionArgs, String sortOrder) {  
+        Log.i(TAG, "query");
+        int match = URIMATCHER.match(uri);
+        switch (match) {
+            case SPEEDDIAL:
+                break;
+            default:
+                break;
+        }
+        final SQLiteDatabase db = mDbHelper.getReadableDatabase();
+        Cursor cursor = db.query(Tables.SPEEDDIAL, projection, selection, selectionArgs, null, null, sortOrder, null);
+        return cursor;
+    }
+
+    @Override
+    public Uri insert(Uri uri, ContentValues values) {
+        Log.i(TAG, "insert");
+        final SQLiteDatabase db = mDbHelper.getWritableDatabase();
+        long id = db.insert(Tables.SPEEDDIAL, null, values);
+        return ContentUris.withAppendedId(uri, id);
+    }
+
+    @Override
+    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
+        final SQLiteDatabase db = mDbHelper.getWritableDatabase();
+        Log.i(TAG, "update");
+        int match = URIMATCHER.match(uri);
+        switch(match) {
+            case SPEEDDIAL:
+                break;
+            default:
+                break;
+        }
+        int result = db.update(Tables.SPEEDDIAL, values, selection, selectionArgs);
+        return result;
+    }
+    
+    @Override
+    public int delete(Uri uri, String selection, String[] selectionArgs) {
+        final SQLiteDatabase db = mDbHelper.getWritableDatabase();
+
+        int match = URIMATCHER.match(uri);
+        switch(match) {
+            case SPEEDDIAL:
+                break;
+            default:
+                break;
+        }
+        int result = db.delete(Tables.SPEEDDIAL, selection, selectionArgs);
+        return result;        
+    }
+}
-- 
2.3.7

